---
# service 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod1 # 배포 이름
  labels:
    app: pod1 # 배포 이름
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pod1 # 배포 이름
  template:
    metadata:
      labels:
        app: pod1 # 배포 이름
    spec:
      volumes:
      - name: data-volume # 볼륨명
        persistentVolumeClaim:
          claimName: nas-shared-pvc
      containers:
      - name: pod1-service  # 컨테이너 이름
        image: nginx # 이미지명 
        imagePullPolicy: Always
#        command: ["sleep"]
#        args: ["infinity"]
        ports: # 컨테이너 내부에서 사용하는 포트 명시
        - name: web
          containerPort: 8080
          protocol: TCP
        volumeMounts: # 영구 저장할 볼륨 (디렉토리) 설정
        - name: data-volume # 위에서 명시한 볼륨명 지정
          mountPath: /data # 서비스에서 필요한 경로 지정

---

apiVersion: v1
kind: Service
metadata:
  name: pod1-web # 서비스 이름
spec:
  selector:
    app: pod1 # 연결할 Deployment의 이름
  type: NodePort
  ports:
  - name: web
    port: 80
    targetPort: 80
    protocol: TCP
    
---
# service 2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod2 # 배포 이름
  labels:
    app: pod2 # 배포 이름
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pod2 # 배포 이름
  template:
    metadata:
      labels:
        app: pod2 # 배포 이름
    spec:
      volumes:
      - name: data-volume # 볼륨명
        persistentVolumeClaim:
          claimName: nas-shared-pvc
      containers:
      - name: pod2-service  # 컨테이너 이름
        image: "nginx" # 이미지명 
        imagePullPolicy: Always
#        command: ["sleep"]
#        args: ["infinity"]
        ports: # 컨테이너 내부에서 사용하는 포트 명시
        - name: web
          containerPort: 80
          protocol: TCP
        volumeMounts: # 영구 저장할 볼륨 (디렉토리) 설정
        - name: data-volume # 위에서 명시한 볼륨명 지정
          mountPath: /data # 서비스에서 필요한 경로 지정

---

apiVersion: v1
kind: Service
metadata:
  name: pod2-web # 서비스 이름
spec:
  selector:
    app: pod2 # 연결할 Deployment의 이름
  type: NodePort
  ports:
  - name: web
    port: 80
    targetPort: 80
    protocol: TCP
    
---
# service 3
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod3 # 배포 이름
  labels:
    app: pod3 # 배포 이름
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pod3 # 배포 이름
  template:
    metadata:
      labels:
        app: pod3 # 배포 이름
    spec:
      volumes:
      - name: data-volume # 볼륨명
        persistentVolumeClaim:
          claimName: nas-shared-pvc
      containers:
      - name: pod3-service  # 컨테이너 이름
        image: "nginx" # 이미지명 
        imagePullPolicy: Always
#        command: ["sleep"]
#        args: ["infinity"]
        ports: # 컨테이너 내부에서 사용하는 포트 명시
        - name: web
          containerPort: 80
          protocol: TCP
        volumeMounts: # 영구 저장할 볼륨 (디렉토리) 설정
        - name: data-volume # 위에서 명시한 볼륨명 지정
          mountPath: /data # 서비스에서 필요한 경로 지정

---

apiVersion: v1
kind: Service
metadata:
  name: pod3-web # 서비스 이름
spec:
  selector:
    app: pod3 # 연결할 Deployment의 이름
  type: NodePort
  ports:
  - name: web
    targetPort: 80
    port: 80
    protocol: TCP
    
---
# service 4
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod4 # 배포 이름
  labels:
    app: pod4 # 배포 이름
spec:
  replicas: 2
  selector:
    matchLabels:
      app: pod4 # 배포 이름
  template:
    metadata:
      labels:
        app: pod4 # 배포 이름
    spec:
      volumes:
      - name: data-volume # 볼륨명
        persistentVolumeClaim:
          claimName: nas-shared-pvc
      containers:
      - name: pod4-service  # 컨테이너 이름
        image: "nginx" # 이미지명 
        imagePullPolicy: Always
#        command: ["sleep"]
#        args: ["infinity"]
        ports: # 컨테이너 내부에서 사용하는 포트 명시
        - name: web
          containerPort: 80
          protocol: TCP
        volumeMounts: # 영구 저장할 볼륨 (디렉토리) 설정
        - name: data-volume # 위에서 명시한 볼륨명 지정
          mountPath: /data # 서비스에서 필요한 경로 지정

---

apiVersion: v1
kind: Service
metadata:
  name: pod4-web # 서비스 이름
spec:
  selector:
    app: pod4 # 연결할 Deployment의 이름
  type: NodePort
  ports:
  - name: web
    port: 80
    targetPort: 80
    protocol: TCP
